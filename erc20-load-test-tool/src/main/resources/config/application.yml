workload:
  model: CLOSED  # either OPEN or CLOSED workload model
  transactions: 1_000 # total transactions to be done
  load-factor: 1 # arrival rate for OPEN model & concurrency for CLOSED model
  progress-interval: 5s # interval for updating progress in web UI

web3j:
  ethClient:
    protocol: http # supports grpc, http, https
    host: localhost # IP of the ethereum client Node
    port: 8545 # port number (50505 - gRPC, 8545 - ethRPC)
    chain-id: 5000 # To enable EIP-155, use the chain id of the network that your Ethereum client is connected.
  credentials:
    wallet-file: src/main/resources/wallets/demo-wallet.json # wallet file location
    wallet-password: Password123 # wallet file password
    private-key: # private key of the sender account (Note: This takes precedence over wallet.)
  receipt:
    attempts: 1 # maximum number of polling attempts to get receipt
    interval: 1000 # sleep interval (ms) between polling attempts
    defer: false # set true for queued polling of transaction receipt
  manage-nonce: true # Managing nonce would avoid the overhead of calling eth_getTransactionCount.
  log-level: NONE # NONE, BASIC, HEADERS, BODY

token:
  contract-address: # ERC20 contract address (Note: without 0x and in case of empty it will deploy a new contract)
  name: SecureToken
  symbol: STK
  initial-supply: 2 # total tokens minted (value is internally multiplied by 10^18)
  recipients: # list of recipient accounts
    - 45412868cB693e231DfD4ABCCA29D9001801d062
    - 1Ff482D42D8727258A1680192Fa4ba925C46Bc43
  amount: 5 # amount of tokens transferred in one transaction
  gas-price: 4_100_000_000 # gas price
  gas-limit: 9_000_000 # gas limit

database:
  url: # postgres database url (Ex: jdbc:postgresql://127.0.0.1:5432/postgres)
  username: postgres # postgres database username
  password: postgres # postgres database password

management:
  endpoints:
    web:
      exposure:
        include: info, health, env, metrics, prometheus
  metrics:
    tags:
      target: ${web3j.eth-client.host}
    export:
      prometheus:
        enabled: true
      wavefront:
        enabled: false
        uri: proxy://localhost:2878
        source:
        global-prefix: ethereum.erc20
        step: 10s
      influx:
        enabled: false
        uri: http://localhost:8086
        token: my-super-secret-auth-token
        org: my-org
        bucket: my-bucket
        step: 10s
    web:
      server:
        request:
          autotime:
            enabled: false

logging:
  pattern:
    file: "%d %-5level [%thread] %logger : %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{0} - %msg%n"
  file:
    name: app.log
  level:
    com:
      vmware: info
    org:
      web3j:
        evm: warn
    io:
      micrometer:
        influx: info

server:
  port: 8080 # web UI port for tracking progress
